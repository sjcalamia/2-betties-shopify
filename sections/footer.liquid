<!-- *** Footer *** -->
{% assign social_enable  = false %}
{% assign payment_enable = false %}

{% for block in section.blocks %}
	{% if block.type == 'socail' %}
		{% assign social_enable  = true %}
	{% endif %}

	{% if block.type == 'payment_methods' %}
		{% assign payment_enable = true %}
	{% endif %}
{% endfor %}

<footer class="footer {% unless social_enable %}social-disable{% endunless %} {% unless payment_enable %}payment-disable{% endunless %} clearfix" style="{% if section.settings.footer_img_enable %}background-image: url({{ section.settings.img_footer_bg | img_url: '2000x' | format: 'jpg' }}); background-repeat: no-repeat; background-position: 50% 50%;{% else %}background-color: {{ section.settings.color_bg }}{% endif %}">

  {% comment %}
  Instagram feed
  For setting go to Admin -> Theme -> Customize Theme -> Footer
  {% endcomment %}

  {% if section.settings.footer_above == 'instagram' %}
    <div class="instagram-feed-container">
      <h2 class="heading--page">{{ section.settings.instagram_heading }}</h2>
      <h4 class="subheading--page-small"><em>{{ section.settings.instagram_subheading }}</em></h4>
      <div class="instagram-feed" id="instafeed"></div>
    </div>
  {% endif %}

{% assign subscribe_heading = section.settings.subscribe_heading %}
{% assign subscribe_lede = section.settings.subscribe_subheading %}
{% include 'subscribe-header' %}
  {% comment %}
  Choose css grid for columns number
  {% endcomment %}
  {% case section.blocks.size %}
    {% when 0 %}
    {% when 1 %}
      {% assign footer_column_width = 'text-center' %}
    {% when 2 %}
      {% assign footer_column_width = 'large--one-half medium--one-half small-one-whole' %}
    {% when 3 %}
      {% assign footer_column_width = 'large--one-third medium--one-third small-one-whole' %}
    {% when 4 %}
      {% assign footer_column_width = 'large--one-quarter medium--one-half small-one-whole' %}
  {% endcase %}

  <div class="wrapper">
    <div class="grid">

      {% for block in section.blocks %}
        {% case block.type %}

          {% when 'address' %}
      		{% comment %}
            Contact information.
            For setting go to Admin -> Theme -> Customize Theme -> Section -> Footer
            {% endcomment %}

      		<div class="grid__item {{ footer_column_width }} footer__item footer__item--contact {% if settings.footer_show_methods_of_payment %}footer__item--contact-half{% endif %}" {{ block.shopify_attributes }}>
              {% if block.settings.address_text != blank %}
                <h4 class="heading--add-small">{{ block.settings.title }}</h4>
                <div>{{ block.settings.address_text }}</div>
              {% endif %}
            </div>
		  	<!--   -->

      	  {% when 'latest_blog' %}
      		{% comment %}
            Latest from blog.
            For setting go to Admin -> Theme -> Customize Theme -> Section -> Footer
            {% endcomment %}

      		<div class="grid__item {{ footer_column_width }} footer__item footer__item--blog ">
              <h4 class="heading--add-small">{{ block.settings.title }}</h4>
              <div class="footer__item--blog-item">
                {% assign article = blogs[block.settings.blog].articles.first %}
                {% if article.image %}
                  {% assign image_alt = article.title | escape %}

                  <a class="article-link" href="{{ article.url }}" title="{{ article.title }}">
                    <img class="article-image" src="{{ article | img_url: 'compact'  }}" alt="{{ article.title }}">
                  </a>

                {% endif %}
                <div class="article-desc">
                  <h5 class="article-title">{{ article.title | link_to: article.url | truncatewords: 6 }}</h5>
                </div>
              </div>
            </div>
      		<!--   -->

      	  {% when 'menu' %}
      		{% comment %}
            Footer menu.
            For setting go to Admin -> Theme -> Customize Theme -> Section -> Footer
            {% endcomment %}

      		<div class="grid__item {{ footer_column_width }} footer__item footer__item--menu">
              <h4 class="heading--add-small">{{ block.settings.title }}</h4>
              <ul class="footer-list">
                {% for link in linklists[block.settings.linklist].links %}
                  <li class="footer-list__item">
                    <a class="footer-list__link" href="{{ link.url }}" title="{{ link.title }}">{{ link.title }}</a>
                  </li>
                {% endfor %}
              </ul>
            </div>
      		<!--   -->

      	  {% when 'social' %}
      		{% comment %}
            Social media icons.
            For setting go to Admin -> Theme -> Customize Theme -> Section -> Footer
            {% endcomment %}

      		<div class="grid__item {{ footer_column_width }} footer__item footer__item--social">
              <h4 class="heading--add-small">{{ block.settings.title }}</h4>
              {% include 'social-links' %}
            </div>
      		<!--   -->

		  {% when 'payment_methods' %}
      		{% comment %}
            Payment Methods.
            For setting go to Admin -> Theme -> Customize Theme -> Section -> Footer
            {% endcomment %}

      		<div class="grid__item {{ footer_column_width }}  footer__item footer__item--payments">
              <p class="copyright-mobile">
                &copy; {{ 'now' | date: "%Y" }}, {{ shop.name }}. {{ 'layout.copyright.right_reserved' | t }}
                {% if section.settings.copyright_link != blank %}
                  <a class="text-link--default" href="{{ section.settings.copyright_link }}" target="_blank" title="{{ section.settings.copyright_link_text }}">{{ section.settings.copyright_link_text }}</a>
                {% endif %}
              </p>


              {% assign enabled_payment_types = 'Visa,Mastercard,Amex,PayPal,Discover' | split: "," %}
              <h4 class="heading--add-small">{{ block.settings.title }}</h4>
              <ul class="list-payments">
                {% for type in enabled_payment_types %}
                    <li class="list-payments__item list-payments__item--img">
                      <img src="{{ type | append: '.png' | asset_img_url: '50x' }}" alt="{{ type }}" />
                    </li>
                {% endfor %}
              </ul>
            </div>
      		<!--   -->

        {% endcase %}
      {% endfor %}

    </div><!-- end grid -->
  </div><!-- end wrapper-->

  <p class="copyright">
  &copy; {{ 'now' | date: "%Y" }}, {{ shop.name }}. {{ 'layout.copyright.right_reserved' | t }}
    {% if section.settings.copyright_link != blank %}
      <a class="text-link--default" href="{{ section.settings.copyright_link }}" target="_blank" title="{{ section.settings.copyright_link_text }}">{{ section.settings.copyright_link_text }}</a>
    {% endif %}
  </p>

</footer>
<!-- *** End footer *** -->

<!-- SVGs -->
{%- include 'ingredients.svg' -%}
<!-- end SVGs -->

{% schema %}
  {
    "name": "Footer",
    "max_blocks": 4,
    "settings": [
	  {
        "type": "header",
        "content": "Footer styles"
      },
      {
        "type": "color",
        "id": "color_bg",
        "label": "Backgroung color",
        "default": "#f5f4f4"
      },
      {
        "type": "checkbox",
        "id": "footer_img_enable",
        "label": "Use image for background"
      },
      {
        "type": "image_picker",
        "id": "img_footer_bg",
        "label": "Upload backgroung image",
        "info": "Max width 2000px and max height 2000px"
      },
	  {
        "type": "header",
        "content": "Section before footer"
      },
      {
        "type": "radio",
        "id": "footer_above",
        "label": "What show before footer",
        "options": [
          {
            "value": "none",
            "label": "None"
          },
          {
            "value": "instagram",
            "label": "Show instagram feed"
          },
          {
            "value": "subscribe_form",
            "label": "Show subscribe form"
          }
        ],
		"default": "instagram",
        "info": "Subscribe settings are available in appropriate item"
      },
	  {
        "type": "header",
        "content": "Subscribe section text"
      },
      {
        "type": "text",
        "id": "instagram_heading",
        "label": "Instagram heading",
        "default": "Instagram"
      },
      {
        "type": "text",
        "id": "instagram_subheading",
        "label": "Instagram subheading",
        "default": "letâ€™s have a look what is behind the scenes"
      },
	  {
        "type": "header",
        "content": "Subscribe section text"
      },
	  {
        "type": "text",
        "id": "subscribe_heading",
        "label": "Subscribe heading",
        "default": "Get notified"
      },
      {
        "type": "text",
        "id": "subscribe_subheading",
        "label": "Subscribe subheading",
        "default": "joining newsletter from Foodly to get the latest news and offers"
      },
	  {
        "type": "header",
        "content": "Copyright"
      },
      {
        "type": "text",
        "id": "copyright_link",
        "label": "Copyright link",
        "default": "http:\/\/themeforest.net\/user\/congruityhub\/portfolio"
      },
      {
        "type": "text",
        "id": "copyright_link_text",
        "label": "Copyright link text",
        "default": "Theme by Congruity Hub"
      }
    ],
    "blocks": [
      {
        "type": "address",
        "name": "Contact Information",
        "limit": 1,
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Contact info"
          },
          {
            "type": "textarea",
            "id": "address_text",
            "label": "Contact info text",
            "default": "<ul><li><i class='fa fa-envelope'><\/i><a href='mailto:contact@foodly.com'>contact@foodly.com<\/a><\/li><li><i class='fa fa-mobile'><\/i>912-823-5448<\/li><li><i class='fa fa-map-marker'><\/i>Foodly Inc Suite<br>109 273 â€“ 3000 High Way<br>Whistler, BC, V0N 2B5 <\/li><\/ul>",
            "info": "Use basic HTML to format text"
          }
        ]
      },
      {
        "type": "latest_blog",
        "name": "Show latest blog post",
        "limit": 1,
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Latest post"
          },
          {
            "type": "blog",
            "id": "blog",
            "label": "Choose blog"
          }
        ]
      },
      {
        "type": "menu",
        "name": "Menu",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Footer Menu"
          },
          {
            "type": "link_list",
            "id": "linklist",
            "label": "Choose menu"
          }
        ]
      },
      {
        "type": "social",
        "name": "Social Links",
		"limit": 1,
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Follow Us"
          }
        ]
      },
	  {
        "type": "payment_methods",
        "name": "Payment methods",
		"limit": 1,
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Payment methods"
          }
        ]
      }
    ]
  }
{% endschema %}

{% javascript %}
let infoboxSizing = (ev)=>{
  if (!document.querySelector(".info-box")) { return; }
  console.log(`Infobox sizing ${ev.type} event received`);
  window.infobox__timeout = []
  require(['jquery'],($)=>{
    $(".info-box").each(
      (i,e)=>{
        let img = e.getElementsByTagName("img")[0]
        let imgheight = parseFloat(window.getComputedStyle(img).getPropertyValue("height"))
        if (imgheight < 100) {
          console.info(`tried to size infobox, but height was ${imgheight} `)
          window.infobox__timeout[i] = window.setTimeout(250,infoboxSizing.bind(e,[i,e]))
          return
        }

        let vw = (n) => parseFloat($(window).width())/100 * n
        let min_fs = $(window).width() < 480 ? vw(3) : 9 // Minimum Font Size: 9px
        let max_fs = vw(5) // Max Font Size: 5vw
        let hed_inc = 1 // Adjustment Increment Headline
        let lede_inc = 0.75 // Adjustment Increment Copy
        let conimgrat = 0.75 // Content to Image Ratio

        let con = e.getElementsByClassName("content")[0]
        let hed = e.getElementsByClassName("hed")[0]
        let lede = e.getElementsByClassName("lede")[0]
        let hsty = window.getComputedStyle(hed)
        let lsty = window.getComputedStyle(lede)

        let $el = $(e)
        let $con = $(con)
        let $hed = $(hed)
        let $lede = $(lede)
        let conheight = $con.height()
        let minconheight = imgheight * conimgrat
        let conot = () => con.offsetTop - minconheight // this will be positive when the content has been pushed too far.

        let fs = (el_style) => parseFloat(el_style.getPropertyValue("font-size"))
        let hfs,//hed font size
            lfs //lede font size
        //console.log("img < con", (imgheight < conheight))
        //console.log( `${imgheight * conimgrat} = ${conimgrat} conimgrat * ${imgheight} imgheight > ${conheight} conheight ? ${(imgheight * conimgrat) > conheight}` )

        let safe = 10000;
        while ( ( imgheight < conheight || conheight < minconheight ) && safe ) {
          safe--; if (!safe) { console.warn("Loop exceeded safe repetitions. Quitting."); break; window.removeEventListener("resize",infoboxSizing) }
          /*console.info(
            `--- ITERATION ${100-safe} -----\n`,
            "---Content Height / Image height -----\n",
            conheight,"\n",
            imgheight,"\n",
            "\n---Headline Objs-----\n",
            hed, "\n",
            $hed, "\n",
            "\n---Lede Objs-----\n",
            lede, "\n",
            $lede, "\n",
            "\n---headline font sizes-----\n",
            hfs, "\n",
            fs(hsty), "\n",
            "\n---lede font sizes-----\n",
            lfs, "\n",
            fs(lsty)
          )*/
          conheight = $hed.height() + parseFloat($hed.css("margin-bottom")) + $lede.height()
          let ohfs = hfs = fs(hsty)
          let olfs = lfs = fs(lsty)
          if ( conheight > imgheight ) {
            // shrink the font to fit
            lfs -= lede_inc
            hfs -= hed_inc
            if (lfs < min_fs) {
              // lede font too small
              console.info(`lede font size reached min ${lfs}px`)
              lfs = olfs
            }
            if (hfs < min_fs || hfs < lfs * 1.25) {
              console.info(`hed font size reached min ${hfs}px`)
              // hed font too small
              hfs = ohfs
            }
            if (( hfs == ohfs && lfs == olfs )) {
              // if they were both too small, and it still doesn't fit...
              // split their rows!
              $(img).addClass('full-width').parent().addClass('full-width')
              $con.addClass('full-width')
              console.info(`fonts both at min_fs [lfs: ${lfs}, hfs: ${hfs}], adding full-width to boxes and starting over`)
              continue
            }
          } else if ( ( minconheight < imgheight && conheight < minconheight ) ) {
            // grown the font if it's too small
            lfs += lede_inc
            hfs += hed_inc
            if (lfs > max_fs ){
              console.info(`lede font size reached max ${lfs}px`)
              lfs = olfs
            }
            if (hfs > max_fs || hfs > lfs * 2) {
              console.info(`hed font size reached max ${hfs}px`)
              hfs = ohfs
            }
            if (hfs == ohfs && lfs == olfs) {
              console.info(`max_fs reached by hfs: ${hfs} and lfs: ${lfs} and the content is still smaller than the image. Stopping.`)
              break
            }
          }
          if (conot() > 0) {
              console.info(`We seem to be wrapping conot(): ${conot()}`)
              $(img).addClass('full-width').parent().addClass('full-width')
              $con.addClass('full-width')
          } else if (parseInt($(window).width) > 669) {
              $(img).removeClass('full-width').parent().removeClass('full-width')
              $con.removeClass('full-width')
          }
          if (lfs > hfs) {
            console.warn(`lede font size ${lfs} was greater than header font size ${hfs}. We've gone too far. Stopping.`)
            break
          }

          $hed.css('font-size',hfs+'px')
          $lede.css('font-size',lfs+'px')
        }
        console.log("offset top: ",con.offsetTop)
        if (conot() <= 0 || $(window).width > 680) {
          // set the padding so that the content is vertically centered.
          let padd = ( imgheight - conheight - lfs) / 2
          //console.log(imgheight,conheight,$hed.height(),$lede.height())
          //$con.css("padding-top", `calc( ${padd}px - .5em )`)
          $con.css("padding-top", `${padd}px`)
              .css("height",`${$(img).height() - padd}px`)
              .removeClass("full-width")
          $(e.getElementsByTagName("img")[0]).removeClass("full-width")//.css('width','')
            .parent().removeClass("full-width")
        } else {
          console.log(conot(),con.offsetTop,minconheight)
          // we're on mobile, where the image and content stack
          $con.css("padding-top", "5vw")
              .css("margin-top", "0")
              .addClass("full-width")
          $(e.getElementsByTagName("img")[0]).addClass("full-width").css('width','100%')
            .parent().addClass("full-width")

        }
      }
    )
  })
}
document.addEventListener("DOMContentLoaded", infoboxSizing)
document.addEventListener("load",infoboxSizing)
window.addEventListener("resize", infoboxSizing)
/* Commented this massive block of code out because it went absolutely haywire */
//let infoboxSizing = (ev)=>{
  //if (!document.querySelector(".info-box")) { return; }
  //console.log(`Infobox sizing ${ev.type} event received`);
  //window.infobox__timeout = []
  //require(['jquery'],($)=>{
    //$(".info-box").each(
      //(i,e)=>{
        //let img = e.getElementsByTagName("img")[0]
        //let imgheight = parseFloat(window.getComputedStyle(img).getPropertyValue("height"))
        //if (imgheight < 100) {
          //console.info(`tried to size infobox, but height was ${imgheight} `)
          //window.infobox__timeout[i] = window.setTimeout(250,infoboxSizing.bind(e,[i,e]))
          //return
        //}

        //let vw = (n) => parseFloat($(window).width())/100 * n
        //let default_min_fs = 12
        //let min_fs = $(window).width() < 480 ? (vw(3) > default_min_fs ? vw(3) : default_min_fs ) : default_min_fs // Minimum Font Size: 9px
        //let max_fs = vw(5) // Max Font Size: 5vw
        //let hed_inc = 1 // Adjustment Increment Headline
        //let lede_inc = 0.75 // Adjustment Increment Copy
        //let conimgrat = 0.75 // Content to Image Ratio

        //let con = e.getElementsByClassName("content")[0]
        //let hed = e.getElementsByClassName("hed")[0]
        //let lede = e.getElementsByClassName("lede")[0]
        //let hsty = window.getComputedStyle(hed)
        //let lsty = window.getComputedStyle(lede)
        //let csty = window.getComputedStyle(con)

        //let $el = $(e)
        //let $con = $(con)
        //let $hed = $(hed)
        //let $lede = $(lede)
        //let conheight = $con.height()
        //let minconheight = imgheight * conimgrat
        //let conot = () => con.offsetTop - minconheight // this will be positive when the content has been pushed too far.

        //let fs = (el_style) => parseFloat(el_style.getPropertyValue("font-size"))
        //let hfs,//hed font size
            //lfs,//lede font size
            //ohfs,// old hfs
            //olfs// old lfs
        ////console.log("img < con", (imgheight < conheight))
        ////console.log( `${imgheight * conimgrat} = ${conimgrat} conimgrat * ${imgheight} imgheight > ${conheight} conheight ? ${(imgheight * conimgrat) > conheight}` )

        //// I think we need to set the whole container to be the height of the image... but will that mess up the content sizing? hrm.
        //// seems like it might screw up the offset detection.. that is, the part of the script that determines if the text is too long even at the minimum font size
        //$con.parent().css("height",`${imgheight}px`)
        //console.log(e)
        //let articleheight = parseFloat(window.getComputedStyle(e).getPropertyValue("height"))
        //console.log(`BEFORE: article height: ${articleheight} content height: ${conheight}`)
        //const safety = 10000
        //let safe = safety
        //while ( ( imgheight < conheight || conheight < articleheight ) && safe ) {
          //console.log(`ITERATING ${safety-safe}: content height: ${conheight}`)
          //safe--; if (!safe) { console.warn("Loop exceeded safe repetitions. Quitting."); break; window.removeEventListener("resize",infoboxSizing) }
          //[>console.info(
            //`--- ITERATION ${100-safe} -----\n`,
            //"---Content Height / Image height -----\n",
            //conheight,"\n",
            //imgheight,"\n",
            //"\n---Headline Objs-----\n",
            //hed, "\n",
            //$hed, "\n",
            //"\n---Lede Objs-----\n",
            //lede, "\n",
            //$lede, "\n",
            //"\n---headline font sizes-----\n",
            //hfs, "\n",
            //fs(hsty), "\n",
            //"\n---lede font sizes-----\n",
            //lfs, "\n",
            //fs(lsty)
          //)*/
          ////conheight = $hed.height() + parseFloat($hed.css("margin-bottom")) + $lede.height()
          //oconheight = conheight
          //conheight = parseFloat(csty.getPropertyValue("height"))
          //let oohfs = ohfs
          //let oolfs = olfs
          //ohfs = hfs = fs(hsty)
          //olfs = lfs = fs(lsty)
          //if ( conheight > imgheight ) {
            //// shrink the font to fit
            //lfs -= lede_inc
            //hfs -= hed_inc
            //if (lfs < min_fs) {
              //// lede font too small
              //console.info(`lede font size reached min ${lfs}px`)
              //lfs = olfs
            //}
            //if (hfs < min_fs || hfs < lfs * 1.25) {
              //console.info(`hed font size reached min ${hfs}px`)
              //// hed font too small
              //hfs = ohfs
            //}
            //if (( hfs == ohfs && lfs == olfs && ( oohfs != hfs && oolfs != lfs ))) {
              //// if they were both too small, and it still doesn't fit...
              //// split their rows!
              //console.log(`oohfs: ${oohfs}, ohfs: ${ohfs}, hfs: ${hfs}, oolfs: ${oolfs}, olfs: ${olfs}, lfs: ${olfs}`)
              //$(img).addClass('full-width').parent().addClass('full-width')
              //$con.addClass('full-width')
              //console.info(`fonts both at min_fs [lfs: ${lfs}, hfs: ${hfs}], adding full-width to boxes and starting over`)
              //continue
            //}
          //} else if ( ( minconheight < imgheight && conheight < minconheight ) || conot()) {
            //// grown the font if it's too small
            //lfs += lede_inc
            //hfs += hed_inc
            //if (lfs > max_fs ){
              //console.info(`lede font size reached max ${lfs}px`)
              //lfs = olfs
            //}
            //if (hfs > max_fs || hfs > lfs * 2) {
              //console.info(`hed font size reached max ${hfs}px`)
              //hfs = ohfs
            //}
            //if (hfs == ohfs && lfs == olfs) {
              //console.info(`max_fs reached by hfs: ${hfs} and lfs: ${lfs} and the content is still smaller than the image. Stopping.`)
              //break
            //}
          //}
          //if (conot() > 0) {
              //console.info(`We seem to be wrapping conot(): ${conot()}`)
            //if (conheight < imgheight) { $con.height(`${imgheight}px`) }
            //let stackedheight = (imgheight + conheight)+(conheight < imgheight ? 0 : parseFloat($con.css("padding-top")))
            //// OK so ^^^ this is a convoluted formula. Let's break it down:
            ////  we know the elements are stacking.. so we need to make the article height to match the size of these two elements together
            ////  then, we want to know if we need to add the padding in or not...
            ////      if the content height was less than the image height, then we adjusted the content height to match, and that means there will
            ////      be a bunch of padding under the text, and we don't need to add more
            ////    otherwise, if the content height was more than the image height already, then we didn't adjust and will need to add padding
            //if (articleheight < stackedheight) {
              //$(e).height(`${stackedheight}px`)
            //}
            //$(img).addClass('full-width').parent().addClass('full-width')
            //$con.addClass('full-width')

          //} else if (parseInt($(window).width) > 669) {
            //$(img).removeClass('full-width').parent().removeClass('full-width')
            //$con.removeClass('full-width')
          //}
          //if (lfs > hfs) {
            //console.warn(`lede font size ${lfs} was greater than header font size ${hfs}. We've gone too far. Stopping.`)
            //break
          //}
          //if (oconheight == conheight) {
            //// we're not even doing anything anymore. Just stop..
            //console.warn(`Content height ${conheight} does not seem to be changing ${oconheight} after ${safety-safe} iterations. We're ineffective. Stopping.`)
            //break
          //}

          //$hed.css('font-size',hfs+'px')
          //$lede.css('font-size',lfs+'px')
        //}
        //console.log(`AFTER: image height: ${imgheight} content height: ${conheight}`)
        //// set the padding so that the content is vertically centered.
        //let cpad = parseFloat(csty.getPropertyValue("padding-top"))
        //console.log(`current padding ${cpad}`)
        //conheigth = $hed.height() + $lede.height()
        //let padd = ( imgheight - conheight - (cpad)) / 2
        ////console.log(imgheight,conheight,$hed.height(),$lede.height())
        ////$con.css("padding-top", `calc( ${padd}px - .5em )`)
        //// get current content padding values
        //$con.css("padding-top", `${cpad+padd}px`)
        //console.log(`cpad: ${cpad}, padd: ${padd}`)
            ////.css("height",`${$(img).height() - padd}px`)
        //console.log("offset top: ",con.offsetTop)
        //if (conot() <= 0 || $(window).width > 680) {
              //$con.removeClass("full-width")
          //$(e.getElementsByTagName("img")[0]).removeClass("full-width")//.css('width','')
            //.parent().removeClass("full-width")
        //} else {
          //console.log(conot(),con.offsetTop,minconheight)
          //// we're on mobile, where the image and content stack
          //$con
            ////.css("padding-top", "5vw")
              ////.css("margin-top", "0")
              //.addClass("full-width")
          //$(e.getElementsByTagName("img")[0]).addClass("full-width").css('width','100%')
            //.parent().addClass("full-width")

        //}
      //}
    //)
  //})
//}
//document.addEventListener("DOMContentLoaded", infoboxSizing)
//document.addEventListener("load",infoboxSizing)
//window.addEventListener("resize", infoboxSizing)
{% endjavascript %}
