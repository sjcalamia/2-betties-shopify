/*
  ---------------------------------------------------------
  Product Picker (choosing product) for Product Builder
  ---------------------------------------------------------
*/
define(['ajaxCart', 'jquery.cart', 'shopInfo'], function(ajaxCart, Cart, shopInfo){

  console.log('Module ProductPicker is loaded');

  function ProductPicker(options){

    var self = this;

    this.options = options;

    this.total; // settings into setSummary()
    this.summary = {};
    this.summary.products = {};

    this.checkoutLink; // settings into setSummary()

    this.DOM = {};
    this.DOM.productPicker    = document.querySelector(options.productPickerSelector);
    this.DOM.pikerContainer   = this.DOM.productPicker.querySelector('.js-picker-container');
    this.DOM.pikerContent     = this.DOM.productPicker.querySelector('.js-picker-content');

    this.DOM.pickerNav        = this.DOM.productPicker.querySelector('.picker-nav');
    this.DOM.pickerInfo       = this.DOM.pickerNav.querySelector('.chosen-pack-info');
    this.DOM.pickerNavPrice   = this.DOM.pickerNav.querySelector('.chosen-pack-total .money');
    this.DOM.pickerNavImage   = this.DOM.pickerNav.querySelector('.chosen-pack-image');
    this.DOM.pickerNavAuthor  = this.DOM.pickerNav.querySelector('.chosen-pack-author');
    this.DOM.pickerNavDesc    = this.DOM.pickerNav.querySelector('.chosen-pack-desc');

    this.DOM.pickerNavNextBtn = this.DOM.pickerNav.querySelector('.next-btn');
    this.DOM.pickerNavPrevBtn = this.DOM.pickerNav.querySelector('.prev-btn');

    this.DOM.summaryContainer = this.DOM.productPicker.querySelector('.js-product-picker-summary');

    this.DOM.activePack;

    this.ingredients = this.getIngredients();
    this.accessories = this.getAccessories();
    this.packPrices  = this.getPrices();

    this.stickPickerNav();

    self.setPrices();



    self.pikerContentBottomCoord = self.getElemBottomCoord(self.DOM.pikerContainer);


    this.DOM.pikerContent.addEventListener('click', function(e){
      self.choosePack(e);
    });

    this.DOM.pickerNavNextBtn.addEventListener('click', function(e){

      var currentTarget = e.currentTarget;
      var hashTab = e.currentTarget.getAttribute('data-tab');

      if ( !self.DOM.activePack) {
        return null;
      }

      if ( hashTab === '#tab-two') { // ???
        self.toggleVisibilityById(self.ingredients, self.DOM.activePack.getAttribute('data-pack-id'));
      }

      if ( hashTab === '#tab-three') { // ???
        self.toggleVisibilityById(self.accessories, self.DOM.activePack.getAttribute('data-pack-id'));
      }

      if ( this.classList.contains('last') ) {
        e.preventDefault();

        var products = [],
            product;

        for ( productId in self.summary.products ) {

          product = {
            'id': productId,
            'quantity': self.summary.products[productId].quantity
          }

          products.push(product);
        }

        self.addToCartRequest(products, this);
      }

      self.options.navNextButtonAction(hashTab);
      self.checkStickedPickerNav();
    });

    this.DOM.pickerNavPrevBtn.addEventListener('click', function(e){

      var currentTarget = e.currentTarget;
      var hashTab = e.currentTarget.getAttribute('data-tab');

      self.options.navPrevButtonAction(hashTab);
      self.checkStickedPickerNav();
    });

    this.DOM.pickerInfo.addEventListener('mouseover', function(e){

      if ( !self.DOM.pickerNav.classList.contains('is-hover') &&  !self.DOM.pickerNav.classList.contains('is-stick')) {
        self.DOM.pickerNav.classList.add('is-hover');
      }
    });

    this.DOM.pickerInfo.addEventListener('mouseout', function(){

      if ( self.DOM.pickerNav.classList.contains('is-hover') ) {
        self.DOM.pickerNav.classList.remove('is-hover')
      }
    });
  };

  ProductPicker.prototype.choosePack = function(e) {
    e.preventDefault();

    var target = e.target,
        self   = this;

    var chosenPack = target.closest('.picker-pack');

    if ( !chosenPack ) {
      return null;
    }

    // reset summary
    this.summary = {};
    this.summary.products = {};

    // add main class to show picker nav
    this.DOM.productPicker.classList.add('pack-chosen');

    if ( this.DOM.activePack && chosenPack === this.DOM.activePack ) {

      // click on active tab
      this.DOM.activePack.classList.remove('is-chosen');
      this.DOM.productPicker.classList.remove('pack-chosen');
      this.DOM.activePack = false;
      this.options.resetPackAction();

      this.transEnd(this.DOM.pickerNav,function(){
        self.setPickerNav();
      });
    } else if ( this.DOM.activePack ) {

      // click on tab the different than active
      this.DOM.activePack.classList.remove('is-chosen');
      chosenPack.classList.add('is-chosen');
      this.DOM.activePack = chosenPack;
      this.setPickerNav(chosenPack);
      this.options.resetPackAction();
    } else {

      // click when no one tab is active
      chosenPack.classList.add('is-chosen');
      this.DOM.activePack = chosenPack;
      this.setPickerNav(chosenPack);
    }

    this.checkAccessories();
  };

  ProductPicker.prototype.setPickerNav = function(chosenPack) {

    if ( !chosenPack ) {

      this.DOM.pickerNavPrice.innerHTML  = Shopify.formatMoney('0', "{{ shop.money_format }}");
      this.DOM.pickerNavImage.src        = '';
      this.DOM.pickerNavDesc.innerHTML   = '';
      this.DOM.pickerNavAuthor.innerHTML = '';

      return;
    }

    var packId, packPrice, packImage, packURL, packDesc, packAuthor, fullDesc;

    packId     = chosenPack.getAttribute('data-pack-id');
    packPrice  = chosenPack.getAttribute('data-price');
    packImage  = chosenPack.getAttribute('data-image');
    packURL    = chosenPack.getAttribute('data-url');
    packDesc   = chosenPack.getAttribute('data-desc');
    packAuthor = chosenPack.getAttribute('data-author');
    fullDesc   = '';

    this.summary.image    = packImage;
    this.summary.packName = chosenPack.getAttribute('data-title');

    this.total = this.packPrices[packId];

    this.DOM.pickerNavPrice.innerHTML    = Shopify.formatMoney(this.total, "{{ shop.money_format }}");
    this.DOM.pickerNavImage.src          = packImage;

    if ( packDesc ) {
      this.DOM.pickerNavAuthor.innerHTML = '{{ "blogs.general.by_author" | t }} ' + packAuthor;
      fullDesc = packDesc + ' <a href="' + packURL + '">{{ "tabs.products_picker.link_to_recipe" | t }}</a>'
    } else {
      this.DOM.pickerNavAuthor.innerHTML = '';
    }

    this.DOM.pickerNavDesc.innerHTML = fullDesc;


    if ( this.DOM.pickerNavPrice && this.DOM.pickerNavPrice.getAttribute('data-currency') !== '' ){
      this.DOM.pickerNavPrice.removeAttribute('data-currency-' + Currency.currentCurrency.toLowerCase());
      this.DOM.pickerNavPrice.removeAttribute('data-currency');
    }

    if ( window.shopCurrency != Currency.currentCurrency ) {
      Currency.convertAll(shopCurrency, Currency.currentCurrency, '.chosen-pack-total span.money', 'money_format');
    }

  };

  ProductPicker.prototype.changeNavBtnAttr = function(prevAttr, nextAttr) {

    if ( prevAttr ) {
      this.DOM.pickerNavPrevBtn.setAttribute('data-tab', prevAttr);
    }

    if ( nextAttr ) {
      this.DOM.pickerNavNextBtn.setAttribute('data-tab', nextAttr);
    }
  };

  ProductPicker.prototype.getIngredients = function() {

    var ingredientsDOM = this.DOM.productPicker.querySelectorAll('.pack-products');
    var ingredients = {},
        packID;

    for ( var i = 0, max = ingredientsDOM.length; i < max; i++) {

      packID = ingredientsDOM[i].getAttribute('data-pack-id');
      ingredients[packID] = ingredientsDOM[i];
    }

    return ingredients;
  };

  ProductPicker.prototype.getAccessories = function(id) {

    var accessoriesDOM = this.DOM.productPicker.querySelectorAll('.pack-accessories');
    var accessories = {},
        self = this,
        packID;


    for ( var i = 0, max = accessoriesDOM.length; i < max; i++) {

      packID = accessoriesDOM[i].getAttribute('data-pack-id');
      accessories[packID] = accessoriesDOM[i];
    }

    return accessories;
  };

  ProductPicker.prototype.getPrices = function() {

    var prices = {},
        packTotal, products, productPrice;

    for ( id in this.ingredients ) {

      products = this.ingredients[id].querySelectorAll('.pack-product');
      packTotal = 0;

      for ( var i = 0, max = products.length; i < max; i++) {
        productPrice = products[i].getAttribute('data-product-price');
        packTotal += parseInt(productPrice);
      }

      prices[id] = packTotal;
    }

    return prices;
  };

  ProductPicker.prototype.setPrices = function() {

    var packPrice;

    for ( id in this.packPrices ) {

      packPrice = this.DOM.pikerContent.querySelector('[data-pack-id="' + id + '"] .picker-pack__price .money');
      packPrice.innerHTML = Shopify.formatMoney(this.packPrices[id], shopInfo.moneyFormat);

      if ( packPrice && packPrice.getAttribute('data-currency') !== '' ){
        packPrice.removeAttribute('data-currency-' + Currency.currentCurrency.toLowerCase());
        packPrice.removeAttribute('data-currency');
      }
      if ( window.shopCurrency != Currency.currentCurrency ) {
        Currency.convertAll(shopCurrency, Currency.currentCurrency, '.picker-pack__price span.money', 'money_format');
      }
    }

  };

  ProductPicker.prototype.checkAccessories = function() {

    if ( !this.DOM.activePack ) {
      this.options.accessoriesAvailable();
      return null;
    }

    var activePackId = this.DOM.activePack.getAttribute('data-pack-id');
    var findAccessor = false;

    for ( var id in this.accessories) {
      if ( activePackId == id ) {

        this.options.accessoriesAvailable();
        break;
      } else {
        this.options.accessoriesNoAvailable();
      }
    }
  };

  ProductPicker.prototype.toggleVisibilityById = function(elements, idToShow) {
    var self = this;
    var activePackID   = this.DOM.activePack.getAttribute('data-pack-id'),
        firstEnter;

    for ( var id in elements) {

      if ( id === idToShow ) {

        elements[id].style.display = 'block';
        firstEnter = elements[id].getAttribute('data-enter');

        var productCheckboxes = elements[id].querySelectorAll('.js-product-checkbox');
        for ( var j = 0, maxJ = productCheckboxes.length; j < maxJ; j++) {

          var checkboxPackID = productCheckboxes[j].getAttribute('data-pack-id');

          // if it accessories screen doesn't check checkbox
          if ( !elements[id].classList.contains('pack-accessories') && !productCheckboxes[j].checked ) {

            productCheckboxes[j].checked = true;
          }

          // checked checkbox for ingredients if we choose product pack the second time
          if ( productCheckboxes[j].checked && checkboxPackID === activePackID ) {

            this.addProductToSummary(productCheckboxes[j]);
          }

          if ( !firstEnter ) {

            productCheckboxes[j].addEventListener('change', function(e){
              self.checkboxEvent(e);
            });
          }
        }

        elements[id].setAttribute('data-enter', 'true');

      } else {
        elements[id].style.display = 'none';
      }
    }


  };

  ProductPicker.prototype.checkboxEvent = function(e) {
    var currentTarget = e.currentTarget,
        productPrice  = currentTarget.getAttribute('data-price');

    if ( currentTarget.checked ) {

      this.total = parseInt(this.total) + parseInt(productPrice);
      this.addProductToSummary(currentTarget);
    } else {

      this.total = parseInt(this.total) - parseInt(productPrice);
      this.removeProductToSummary(currentTarget);
    }

    this.DOM.pickerNavPrice.innerHTML = Shopify.formatMoney(this.total, "{{ shop.money_format }}");

      if ( this.DOM.pickerNavPrice && this.DOM.pickerNavPrice.getAttribute('data-currency') !== '' ){
        this.DOM.pickerNavPrice.removeAttribute('data-currency-' + Currency.currentCurrency.toLowerCase());
        this.DOM.pickerNavPrice.removeAttribute('data-currency');
      }
      if ( window.shopCurrency != Currency.currentCurrency ) {
        Currency.convertAll(shopCurrency, Currency.currentCurrency, '.chosen-pack-total span.money', 'money_format');
      }

  };

  ProductPicker.prototype.addProductToSummary = function(checkbox) {

    var productID, productName, productPrice, accessories;

    productID     = checkbox.getAttribute('data-product-id');
    productPrice  = checkbox.getAttribute('data-price');
    productName   = checkbox.getAttribute('data-name');
    accessories   = checkbox.getAttribute('data-accessories');

    this.summary.products[productID] = {
      'name': productName,
      'price': productPrice,
      'quantity': 1,
      'accessories': accessories ? true : false
    }
  };

  ProductPicker.prototype.removeProductToSummary = function(checkbox) {

    var productID = checkbox.getAttribute('data-product-id');

    delete this.summary.products[productID];
  };

  ProductPicker.prototype.setSummary = function() {

    var ingredientsListContainer = this.DOM.summaryContainer.querySelector('.ingredients-list-container'),
        accessoriesListContainer = this.DOM.summaryContainer.querySelector('.accessories-list-container'),
        chosenPackImage         = this.DOM.summaryContainer.querySelector('.chosen-pack-image'),
        chosenPackTitle         = this.DOM.summaryContainer.querySelector('.picker-pack__title'),
        chosenPackTotalPrice    = this.DOM.summaryContainer.querySelector('.picker-pack__price .money');

    // reset list of ingredients and accessorieses
    ingredientsListContainer.innerHTML = '';
    accessoriesListContainer.innerHTML = '';

    this.checkoutLink = 'cart/';

    chosenPackImage.src            = this.summary.image;
    chosenPackTitle.innerHTML      = this.summary.packName;
    chosenPackTotalPrice.innerHTML = Shopify.formatMoney(this.total, "{{ shop.money_format }}");

    this.convertCurrency(chosenPackTotalPrice);

    // Crate ingredients list
    if ( Object.keys(this.summary.products).length > 0) {

      var ingredientsList     = document.createElement('ul'),
          ingredientsListTemp = '',
          accessoriesListTemp = '',
          isAccessories       = false,
          product;

      ingredientsList.className = 'ingredients-list summary-list';

      for ( var productID in this.summary.products ) {

        product = this.summary.products[productID];

        this.checkoutLink += productID + ':' + product.quantity + ',';

        if ( product.accessories ) {
          accessoriesListTemp += '<li class="summary-list__item"><strong>'+ product.name + '</strong> for <strong><span class="money">' + Shopify.formatMoney(product.price, "{{ shop.money_with_currency_format }}") + '</span></strong></li>';
          isAccessories = true;
        } else {
          ingredientsListTemp += '<li class="summary-list__item"><strong>'+ product.quantity +' x kg ' + product.name + '</strong> for <strong><span class="money">' + Shopify.formatMoney(product.price, "{{ shop.money_with_currency_format }}") + '</span></strong></li>';

        }
      }

      ingredientsList.innerHTML = ingredientsListTemp;
      ingredientsListContainer.appendChild(ingredientsList);

      if ( isAccessories ) {
        var accessoriesList       = document.createElement('ul');
        accessoriesList.className = 'accessories-list summary-list';

        var accessoriesListTitle = document.createElement('h4');
        accessoriesListTitle.className = 'summary-list-title';
        accessoriesListTitle.textContent = 'Accessories';

        accessoriesList.innerHTML = accessoriesListTemp;

        accessoriesListContainer.appendChild(accessoriesListTitle);
        accessoriesListContainer.appendChild(accessoriesList);
      }
    }


    Currency.convertAll(shopCurrency, Currency.currentCurrency, '.summary-list__item span.money', 'money_format');
  };

  ProductPicker.prototype.toggleCheckoutLink = function(toggle) {

    if (toggle) {
      this.DOM.pickerNavNextBtn.classList.add('last');
      this.DOM.pickerNavNextBtn.title = "Add to Cart";
    } else{
      this.DOM.pickerNavNextBtn.classList.remove('last');
      this.DOM.pickerNavNextBtn.title = "Next Step";
    }
  };

  ProductPicker.prototype.transEnd = function(element, callback) {
    var testEl = document.createElement("fakeelement");
    var currentTrans;

    var transitions = {
      "OTransition"     : "oTransitionEnd",
      "MozTransition"   : "transitionend",
      "WebkitTransition": "webkitTransitionEnd",
      "transition"      : "transitionend",
    }

    for (var t in transitions){
      if (testEl.style[t] !== undefined){
        currentTrans = transitions[t];
      }
    }

    element.addEventListener(currentTrans, function transEvent(){
      callback();
      element.removeEventListener(currentTrans, transEvent);
    });
  };

  ProductPicker.prototype.convertCurrency = function(element) {
    if ( element && element.getAttribute('data-currency') !== '' ){
      element.removeAttribute('data-currency-' + Currency.currentCurrency.toLowerCase());
      element.removeAttribute('data-currency');
    }
    if ( window.shopCurrency != Currency.currentCurrency ) {
      Currency.convertAll(shopCurrency, Currency.currentCurrency, '.summary-list__item span.money', 'money_format');
    }
  };

  ProductPicker.prototype.stickPickerNav = function() {
    var self = this;

    var elemOffset           = 120,
        ticking              = false,
        windowHeight         = window.innerHeight;

    // the first runing of animation or after page refresh
    if ( (windowHeight +  window.pageYOffset) >= (this.pikerContentBottomCoord + elemOffset) )  {

      this.DOM.pickerNav.classList.add('is-stick');
    }

    // store pageYOffset into a variable
    function onScroll() {

      latestKnownScrollPos = window.pageYOffset;
      requestTick();
    }

    // run requestAnimationFrame only during scrolling
    function requestTick() {

        if ( !ticking ) {
            requestAnimationFrame(update);
        }

        ticking = true;
    }

    // add animation for items
    function update() {

        ticking = false;

        if ( (windowHeight + latestKnownScrollPos) >= (self.pikerContentBottomCoord + elemOffset) )  {
          self.DOM.pickerNav.classList.add('is-stick');
        } else if ( self.DOM.pickerNav.classList.contains('is-stick') ) {

          self.DOM.pickerNav.classList.add('is-hide');
          self.DOM.pickerNav.classList.remove('is-stick');

          setTimeout(function(){


            self.DOM.pickerNav.classList.remove('is-hide');
          }, 300);
        }
    }

    window.addEventListener('scroll', onScroll, false);
  };

  ProductPicker.prototype.getElemBottomCoord = function(element) {

    var elemCoord     = calcCoordinates(element);
    var elementHeight = element.clientHeight;

    function calcCoordinates(el) {

      var box = el.getBoundingClientRect();

      return {
        top:  box.top  + window.pageYOffset,
        left: box.left + window.pageXOffset
      };
    }

    return elemCoord.top + elementHeight;
  };

  ProductPicker.prototype.checkStickedPickerNav = function() {
    var self = this;

    this.pikerContentBottomCoord = this.getElemBottomCoord(this.DOM.pikerContainer);

    if ( (window.innerHeight + window.pageYOffset) >= (this.pikerContentBottomCoord + 120) )  {

      this.DOM.pickerNav.classList.add('is-stick');
    } else if ( this.DOM.pickerNav.classList.contains('is-stick') ) {

      this.DOM.pickerNav.classList.remove('is-stick');
    }
  };

  ProductPicker.prototype.addToCartRequest = function(products, insertEl) {

    var self = this;

    var request = function() {
      if ( products.length ) {

        $.ajax({
          type: "post",
          url: shopInfo.secureUrl + "/cart/add.js",
          data: 'quantity=' + products[0].quantity + '&id=' + products[0].id,
          dataType: 'json',
          success: function() {

            products.shift();
            request();
          }
        });
      } else {

        ajaxCart.updateDropdownCart();
        self.showFromMsg(insertEl);
      }
    }

    request();
  };

  ProductPicker.prototype.showFromMsg = function(insertEl) {

    var formMsg   = insertEl.querySelector('.form-cart-message');
    var submitBtn = insertEl.querySelector('.js-add-to-card');

    if ( formMsg ) {

      formMsg.classList.remove('hide-message', 'hide');
      formMsg.classList.add('show-message');
    } else {

      formMsg = document.createElement('p');
      formMsg.classList.add('form-cart-message', 'show-message');
      formMsg.innerHTML = "{{ 'cart.general.added_to_cart_products_html' | t }}";
      insertEl.parentElement.insertBefore(formMsg, insertEl);

      // Hide message
      setTimeout(function() {
        formMsg.classList.remove('show-message');
        formMsg.classList.add('hide-message');
        formMsg.addEventListener('animationend', function addClasses() {
          formMsg.classList.add('hide');
          formMsg.removeEventListener('animationend', addClasses);
        });
      }, 5000);

    }
  };

  return ProductPicker;
});
